############################## PARSING START ##############################

PARSING LINE NO. 1 :


PARSING LINE NO. 2 :


PARSING LINE NO. 3 :


PARSING LINE NO. 4 :


PARSING LINE NO. 5 :


PARSING LINE NO. 6 :

function_specifier -> inline
type_specifier -> int
declaration_specifiers_opt -> EPSILON
declaration_specifiers -> type_specifier declaration_specifiers_opt
declaration_specifiers_opt -> declaration_specifiers
declaration_specifiers -> function_specifier declaration_specifiers_opt
pointer_opt -> EPSILON
direct_declarator -> identifier
type_specifier -> int
declaration_specifiers_opt -> EPSILON
declaration_specifiers -> type_specifier declaration_specifiers_opt
pointer_opt -> EPSILON
direct_declarator -> identifier
type_qualifier_list_opt -> EPSILON
assignment_expression_opt -> EPSILON
direct_declarator -> direct_declarator [ type_qualifier_list_opt assignment_expression_opt ]
declarator -> pointer_opt direct_declarator
parameter_declaration -> declaration_specifiers declarator
parameter_list -> parameter_declaration
type_specifier -> int
declaration_specifiers_opt -> EPSILON
declaration_specifiers -> type_specifier declaration_specifiers_opt
pointer_opt -> EPSILON
direct_declarator -> identifier
declarator -> pointer_opt direct_declarator
parameter_declaration -> declaration_specifiers declarator
parameter_list -> parameter_list , parameter_declaration
type_specifier -> int
declaration_specifiers_opt -> EPSILON
declaration_specifiers -> type_specifier declaration_specifiers_opt
pointer_opt -> EPSILON
direct_declarator -> identifier
declarator -> pointer_opt direct_declarator
parameter_declaration -> declaration_specifiers declarator
parameter_list -> parameter_list , parameter_declaration
parameter_type_list -> parameter_list
direct_declarator -> direct_declarator ( parameter_type_list )

PARSING LINE NO. 7 :

declarator -> pointer_opt direct_declarator
declaration_list_opt -> EPSILON

PARSING LINE NO. 8 :

type_specifier -> int
declaration_specifiers_opt -> EPSILON
declaration_specifiers -> type_specifier declaration_specifiers_opt
pointer_opt -> EPSILON
direct_declarator -> identifier
declarator -> pointer_opt direct_declarator
constant -> INT_CONST
primary_expression -> constant
postfix_expression -> primary_expression
unary_expression -> postfix_expression
cast_expression -> unary_expression
multiplicative_expression -> cast_expression
additive_expression -> multiplicative_expression
shift_expression -> additive_expression
relational_expression -> shift_expression
equality_expression -> relational_expression
AND_expression -> equality_expression
exclusive_OR_expression -> AND_expression
inclusive_OR_expression -> exclusive_OR_expression
logical_AND_expression -> inclusive_OR_expression
logical_OR_expression -> logical_AND_expression
conditional_expression -> logical_OR_expression
assignment_expression -> conditional_expression
initializer -> assignment_expression
init_declarator -> declarator = initializer
init_declarator_list -> init_declarator
init_declarator_list_opt -> init_declarator_list
declaration -> declaration_specifiers init_declarator_list_opt ;
primary_expression -> identifier
postfix_expression -> primary_expression
unary_expression -> postfix_expression
cast_expression -> unary_expression
multiplicative_expression -> cast_expression
additive_expression -> multiplicative_expression
shift_expression -> additive_expression
relational_expression -> shift_expression
primary_expression -> identifier
postfix_expression -> primary_expression
unary_expression -> postfix_expression
cast_expression -> unary_expression
multiplicative_expression -> cast_expression
additive_expression -> multiplicative_expression
shift_expression -> additive_expression
relational_expression -> relational_expression < shift_expression
equality_expression -> relational_expression
AND_expression -> equality_expression
exclusive_OR_expression -> AND_expression
inclusive_OR_expression -> exclusive_OR_expression
logical_AND_expression -> inclusive_OR_expression
logical_OR_expression -> logical_AND_expression
conditional_expression -> logical_OR_expression
assignment_expression -> conditional_expression
expression -> assignment_expression
expression_opt -> expression
primary_expression -> identifier
postfix_expression -> primary_expression
postfix_expression -> postfix_expression ++
unary_expression -> postfix_expression
cast_expression -> unary_expression
multiplicative_expression -> cast_expression
additive_expression -> multiplicative_expression
shift_expression -> additive_expression
relational_expression -> shift_expression
equality_expression -> relational_expression
AND_expression -> equality_expression
exclusive_OR_expression -> AND_expression
inclusive_OR_expression -> exclusive_OR_expression
logical_AND_expression -> inclusive_OR_expression
logical_OR_expression -> logical_AND_expression
conditional_expression -> logical_OR_expression
assignment_expression -> conditional_expression
expression -> assignment_expression
expression_opt -> expression

PARSING LINE NO. 9 :


PARSING LINE NO. 10 :

primary_expression -> identifier
postfix_expression -> primary_expression
primary_expression -> identifier
postfix_expression -> primary_expression
unary_expression -> postfix_expression
cast_expression -> unary_expression
multiplicative_expression -> cast_expression
additive_expression -> multiplicative_expression
shift_expression -> additive_expression
relational_expression -> shift_expression
equality_expression -> relational_expression
AND_expression -> equality_expression
exclusive_OR_expression -> AND_expression
inclusive_OR_expression -> exclusive_OR_expression
logical_AND_expression -> inclusive_OR_expression
logical_OR_expression -> logical_AND_expression
conditional_expression -> logical_OR_expression
assignment_expression -> conditional_expression
expression -> assignment_expression
postfix_expression -> postfix_expression [ expression ]
unary_expression -> postfix_expression
cast_expression -> unary_expression
multiplicative_expression -> cast_expression
additive_expression -> multiplicative_expression
shift_expression -> additive_expression
relational_expression -> shift_expression
equality_expression -> relational_expression
primary_expression -> identifier
postfix_expression -> primary_expression
unary_expression -> postfix_expression
cast_expression -> unary_expression
multiplicative_expression -> cast_expression
additive_expression -> multiplicative_expression
shift_expression -> additive_expression
relational_expression -> shift_expression
equality_expression -> equality_expression == relational_expression
AND_expression -> equality_expression
exclusive_OR_expression -> AND_expression
inclusive_OR_expression -> exclusive_OR_expression
logical_AND_expression -> inclusive_OR_expression
logical_OR_expression -> logical_AND_expression
conditional_expression -> logical_OR_expression
assignment_expression -> conditional_expression
expression -> assignment_expression
primary_expression -> identifier
postfix_expression -> primary_expression
unary_expression -> postfix_expression
cast_expression -> unary_expression
multiplicative_expression -> cast_expression
additive_expression -> multiplicative_expression
shift_expression -> additive_expression
relational_expression -> shift_expression
equality_expression -> relational_expression
AND_expression -> equality_expression
exclusive_OR_expression -> AND_expression
inclusive_OR_expression -> exclusive_OR_expression
logical_AND_expression -> inclusive_OR_expression
logical_OR_expression -> logical_AND_expression
conditional_expression -> logical_OR_expression
assignment_expression -> conditional_expression
expression -> assignment_expression
expression_opt -> expression
jump_statement -> return expression_opt ;
statement -> jump_statement

PARSING LINE NO. 11 :

selection_statement -> if ( expression ) statement
statement -> selection_statement
block_item -> statement
block_item_list -> block_item
block_item_list_opt -> block_item_list
compound_statement -> { block_item_list_opt }
statement -> compound_statement
iteration_statement -> for ( declaration expression_opt ; expression_opt ) statement
statement -> iteration_statement
block_item -> statement
block_item_list -> block_item

PARSING LINE NO. 12 :


PARSING LINE NO. 13 :

unary_operator -> -
constant -> INT_CONST
primary_expression -> constant
postfix_expression -> primary_expression
unary_expression -> postfix_expression
cast_expression -> unary_expression
unary_expression -> unary_operator cast_expression
cast_expression -> unary_expression
multiplicative_expression -> cast_expression
additive_expression -> multiplicative_expression
shift_expression -> additive_expression
relational_expression -> shift_expression
equality_expression -> relational_expression
AND_expression -> equality_expression
exclusive_OR_expression -> AND_expression
inclusive_OR_expression -> exclusive_OR_expression
logical_AND_expression -> inclusive_OR_expression
logical_OR_expression -> logical_AND_expression
conditional_expression -> logical_OR_expression
assignment_expression -> conditional_expression
expression -> assignment_expression
expression_opt -> expression
jump_statement -> return expression_opt ;
statement -> jump_statement
block_item -> statement
block_item_list -> block_item_list block_item

PARSING LINE NO. 14 :

block_item_list_opt -> block_item_list
compound_statement -> { block_item_list_opt }
function_definition -> declaration_specifiers declarator declaration_list_opt compound_statement
external_declaration -> function_definition
translation_unit -> external_declaration

PARSING LINE NO. 15 :


PARSING LINE NO. 16 :

type_specifier -> int
declaration_specifiers_opt -> EPSILON
declaration_specifiers -> type_specifier declaration_specifiers_opt
pointer_opt -> EPSILON
direct_declarator -> identifier
type_specifier -> int
declaration_specifiers_opt -> EPSILON
declaration_specifiers -> type_specifier declaration_specifiers_opt
pointer_opt -> EPSILON
direct_declarator -> identifier
declarator -> pointer_opt direct_declarator
parameter_declaration -> declaration_specifiers declarator
parameter_list -> parameter_declaration
type_specifier -> int
declaration_specifiers_opt -> EPSILON
declaration_specifiers -> type_specifier declaration_specifiers_opt
pointer_opt -> EPSILON
direct_declarator -> identifier
declarator -> pointer_opt direct_declarator
parameter_declaration -> declaration_specifiers declarator
parameter_list -> parameter_list , parameter_declaration
parameter_type_list -> parameter_list
direct_declarator -> direct_declarator ( parameter_type_list )

PARSING LINE NO. 17 :

declarator -> pointer_opt direct_declarator
declaration_list_opt -> EPSILON

PARSING LINE NO. 18 :

primary_expression -> identifier
postfix_expression -> primary_expression
unary_expression -> postfix_expression
cast_expression -> unary_expression
multiplicative_expression -> cast_expression
additive_expression -> multiplicative_expression
shift_expression -> additive_expression
relational_expression -> shift_expression
equality_expression -> relational_expression
constant -> INT_CONST
primary_expression -> constant
postfix_expression -> primary_expression
unary_expression -> postfix_expression
cast_expression -> unary_expression
multiplicative_expression -> cast_expression
additive_expression -> multiplicative_expression
shift_expression -> additive_expression
relational_expression -> shift_expression
equality_expression -> equality_expression == relational_expression
AND_expression -> equality_expression
exclusive_OR_expression -> AND_expression
inclusive_OR_expression -> exclusive_OR_expression
logical_AND_expression -> inclusive_OR_expression
logical_OR_expression -> logical_AND_expression
conditional_expression -> logical_OR_expression
assignment_expression -> conditional_expression
expression -> assignment_expression
constant -> INT_CONST
primary_expression -> constant
postfix_expression -> primary_expression
unary_expression -> postfix_expression
cast_expression -> unary_expression
multiplicative_expression -> cast_expression
additive_expression -> multiplicative_expression
shift_expression -> additive_expression
relational_expression -> shift_expression
equality_expression -> relational_expression
AND_expression -> equality_expression
exclusive_OR_expression -> AND_expression
inclusive_OR_expression -> exclusive_OR_expression
logical_AND_expression -> inclusive_OR_expression
logical_OR_expression -> logical_AND_expression
conditional_expression -> logical_OR_expression
assignment_expression -> conditional_expression
expression -> assignment_expression
expression_opt -> expression
jump_statement -> return expression_opt ;
statement -> jump_statement

PARSING LINE NO. 19 :

primary_expression -> identifier
postfix_expression -> primary_expression
unary_expression -> postfix_expression
cast_expression -> unary_expression
multiplicative_expression -> cast_expression
additive_expression -> multiplicative_expression
shift_expression -> additive_expression
relational_expression -> shift_expression
equality_expression -> relational_expression
constant -> INT_CONST
primary_expression -> constant
postfix_expression -> primary_expression
unary_expression -> postfix_expression
cast_expression -> unary_expression
multiplicative_expression -> cast_expression
additive_expression -> multiplicative_expression
shift_expression -> additive_expression
relational_expression -> shift_expression
equality_expression -> equality_expression == relational_expression
AND_expression -> equality_expression
exclusive_OR_expression -> AND_expression
inclusive_OR_expression -> exclusive_OR_expression
logical_AND_expression -> inclusive_OR_expression
logical_OR_expression -> logical_AND_expression
conditional_expression -> logical_OR_expression
assignment_expression -> conditional_expression
expression -> assignment_expression
primary_expression -> identifier
postfix_expression -> primary_expression
unary_expression -> postfix_expression
cast_expression -> unary_expression
multiplicative_expression -> cast_expression
additive_expression -> multiplicative_expression
shift_expression -> additive_expression
relational_expression -> shift_expression
equality_expression -> relational_expression
AND_expression -> equality_expression
exclusive_OR_expression -> AND_expression
inclusive_OR_expression -> exclusive_OR_expression
logical_AND_expression -> inclusive_OR_expression
logical_OR_expression -> logical_AND_expression
conditional_expression -> logical_OR_expression
assignment_expression -> conditional_expression
expression -> assignment_expression
expression_opt -> expression
jump_statement -> return expression_opt ;
statement -> jump_statement

PARSING LINE NO. 20 :


PARSING LINE NO. 21 :

primary_expression -> identifier
postfix_expression -> primary_expression
unary_expression -> postfix_expression
cast_expression -> unary_expression
multiplicative_expression -> cast_expression
additive_expression -> multiplicative_expression
shift_expression -> additive_expression
relational_expression -> shift_expression
equality_expression -> relational_expression
AND_expression -> equality_expression
constant -> INT_CONST
primary_expression -> constant
postfix_expression -> primary_expression
unary_expression -> postfix_expression
cast_expression -> unary_expression
multiplicative_expression -> cast_expression
additive_expression -> multiplicative_expression
shift_expression -> additive_expression
relational_expression -> shift_expression
equality_expression -> relational_expression
constant -> INT_CONST
primary_expression -> constant
postfix_expression -> primary_expression
unary_expression -> postfix_expression
cast_expression -> unary_expression
multiplicative_expression -> cast_expression
additive_expression -> multiplicative_expression
shift_expression -> additive_expression
relational_expression -> shift_expression
equality_expression -> equality_expression == relational_expression
AND_expression -> AND_expression & equality_expression
exclusive_OR_expression -> AND_expression
inclusive_OR_expression -> exclusive_OR_expression
logical_AND_expression -> inclusive_OR_expression
logical_OR_expression -> logical_AND_expression
conditional_expression -> logical_OR_expression
assignment_expression -> conditional_expression
expression -> assignment_expression
primary_expression -> identifier
postfix_expression -> primary_expression
primary_expression -> identifier
postfix_expression -> primary_expression
unary_expression -> postfix_expression
cast_expression -> unary_expression
multiplicative_expression -> cast_expression
additive_expression -> multiplicative_expression
shift_expression -> additive_expression
relational_expression -> shift_expression
equality_expression -> relational_expression
AND_expression -> equality_expression
exclusive_OR_expression -> AND_expression
inclusive_OR_expression -> exclusive_OR_expression
logical_AND_expression -> inclusive_OR_expression
logical_OR_expression -> logical_AND_expression
conditional_expression -> logical_OR_expression
assignment_expression -> conditional_expression
argument_expression_list -> assignment_expression
primary_expression -> identifier
postfix_expression -> primary_expression
unary_expression -> postfix_expression
cast_expression -> unary_expression
multiplicative_expression -> cast_expression
additive_expression -> multiplicative_expression
constant -> INT_CONST
primary_expression -> constant
postfix_expression -> primary_expression
unary_expression -> postfix_expression
cast_expression -> unary_expression
multiplicative_expression -> cast_expression
additive_expression -> additive_expression − multiplicative_expression
shift_expression -> additive_expression
relational_expression -> shift_expression
equality_expression -> relational_expression
AND_expression -> equality_expression
exclusive_OR_expression -> AND_expression
inclusive_OR_expression -> exclusive_OR_expression
logical_AND_expression -> inclusive_OR_expression
logical_OR_expression -> logical_AND_expression
conditional_expression -> logical_OR_expression
assignment_expression -> conditional_expression
expression -> assignment_expression
primary_expression -> ( expression )
postfix_expression -> primary_expression
unary_expression -> postfix_expression
cast_expression -> unary_expression
multiplicative_expression -> cast_expression
constant -> INT_CONST
primary_expression -> constant
postfix_expression -> primary_expression
unary_expression -> postfix_expression
cast_expression -> unary_expression
multiplicative_expression -> multiplicative_expression / cast_expression
additive_expression -> multiplicative_expression
shift_expression -> additive_expression
relational_expression -> shift_expression
equality_expression -> relational_expression
AND_expression -> equality_expression
exclusive_OR_expression -> AND_expression
inclusive_OR_expression -> exclusive_OR_expression
logical_AND_expression -> inclusive_OR_expression
logical_OR_expression -> logical_AND_expression
conditional_expression -> logical_OR_expression
assignment_expression -> conditional_expression
argument_expression_list -> argument_expression_list , assignment_expression
argument_expression_list_opt -> argument_expression_list
postfix_expression -> postfix_expression ( argument_expression_list_opt )
unary_expression -> postfix_expression
cast_expression -> unary_expression
multiplicative_expression -> cast_expression
primary_expression -> identifier
postfix_expression -> primary_expression
primary_expression -> identifier
postfix_expression -> primary_expression
unary_expression -> postfix_expression
cast_expression -> unary_expression
multiplicative_expression -> cast_expression
additive_expression -> multiplicative_expression
shift_expression -> additive_expression
relational_expression -> shift_expression
equality_expression -> relational_expression
AND_expression -> equality_expression
exclusive_OR_expression -> AND_expression
inclusive_OR_expression -> exclusive_OR_expression
logical_AND_expression -> inclusive_OR_expression
logical_OR_expression -> logical_AND_expression
conditional_expression -> logical_OR_expression
assignment_expression -> conditional_expression
argument_expression_list -> assignment_expression
primary_expression -> identifier
postfix_expression -> primary_expression
unary_expression -> postfix_expression
cast_expression -> unary_expression
multiplicative_expression -> cast_expression
additive_expression -> multiplicative_expression
constant -> INT_CONST
primary_expression -> constant
postfix_expression -> primary_expression
unary_expression -> postfix_expression
cast_expression -> unary_expression
multiplicative_expression -> cast_expression
additive_expression -> additive_expression − multiplicative_expression
shift_expression -> additive_expression
relational_expression -> shift_expression
equality_expression -> relational_expression
AND_expression -> equality_expression
exclusive_OR_expression -> AND_expression
inclusive_OR_expression -> exclusive_OR_expression
logical_AND_expression -> inclusive_OR_expression
logical_OR_expression -> logical_AND_expression
conditional_expression -> logical_OR_expression
assignment_expression -> conditional_expression
expression -> assignment_expression
primary_expression -> ( expression )
postfix_expression -> primary_expression
unary_expression -> postfix_expression
cast_expression -> unary_expression
multiplicative_expression -> cast_expression
constant -> INT_CONST
primary_expression -> constant
postfix_expression -> primary_expression
unary_expression -> postfix_expression
cast_expression -> unary_expression
multiplicative_expression -> multiplicative_expression / cast_expression
additive_expression -> multiplicative_expression
shift_expression -> additive_expression
relational_expression -> shift_expression
equality_expression -> relational_expression
AND_expression -> equality_expression
exclusive_OR_expression -> AND_expression
inclusive_OR_expression -> exclusive_OR_expression
logical_AND_expression -> inclusive_OR_expression
logical_OR_expression -> logical_AND_expression
conditional_expression -> logical_OR_expression
assignment_expression -> conditional_expression
argument_expression_list -> argument_expression_list , assignment_expression
argument_expression_list_opt -> argument_expression_list
postfix_expression -> postfix_expression ( argument_expression_list_opt )
unary_expression -> postfix_expression
cast_expression -> unary_expression
multiplicative_expression -> multiplicative_expression * cast_expression
primary_expression -> identifier
postfix_expression -> primary_expression
unary_expression -> postfix_expression
cast_expression -> unary_expression
multiplicative_expression -> multiplicative_expression * cast_expression
additive_expression -> multiplicative_expression
shift_expression -> additive_expression
relational_expression -> shift_expression
equality_expression -> relational_expression
AND_expression -> equality_expression
exclusive_OR_expression -> AND_expression
inclusive_OR_expression -> exclusive_OR_expression
logical_AND_expression -> inclusive_OR_expression
logical_OR_expression -> logical_AND_expression
conditional_expression -> logical_OR_expression
assignment_expression -> conditional_expression
expression -> assignment_expression
expression_opt -> expression
jump_statement -> return expression_opt ;
statement -> jump_statement

PARSING LINE NO. 22 :


PARSING LINE NO. 23 :

primary_expression -> identifier
postfix_expression -> primary_expression
primary_expression -> identifier
postfix_expression -> primary_expression
unary_expression -> postfix_expression
cast_expression -> unary_expression
multiplicative_expression -> cast_expression
additive_expression -> multiplicative_expression
shift_expression -> additive_expression
relational_expression -> shift_expression
equality_expression -> relational_expression
AND_expression -> equality_expression
exclusive_OR_expression -> AND_expression
inclusive_OR_expression -> exclusive_OR_expression
logical_AND_expression -> inclusive_OR_expression
logical_OR_expression -> logical_AND_expression
conditional_expression -> logical_OR_expression
assignment_expression -> conditional_expression
argument_expression_list -> assignment_expression
primary_expression -> identifier
postfix_expression -> primary_expression
unary_expression -> postfix_expression
cast_expression -> unary_expression
multiplicative_expression -> cast_expression
constant -> INT_CONST
primary_expression -> constant
postfix_expression -> primary_expression
unary_expression -> postfix_expression
cast_expression -> unary_expression
multiplicative_expression -> multiplicative_expression / cast_expression
additive_expression -> multiplicative_expression
shift_expression -> additive_expression
relational_expression -> shift_expression
equality_expression -> relational_expression
AND_expression -> equality_expression
exclusive_OR_expression -> AND_expression
inclusive_OR_expression -> exclusive_OR_expression
logical_AND_expression -> inclusive_OR_expression
logical_OR_expression -> logical_AND_expression
conditional_expression -> logical_OR_expression
assignment_expression -> conditional_expression
argument_expression_list -> argument_expression_list , assignment_expression
argument_expression_list_opt -> argument_expression_list
postfix_expression -> postfix_expression ( argument_expression_list_opt )
unary_expression -> postfix_expression
cast_expression -> unary_expression
multiplicative_expression -> cast_expression
primary_expression -> identifier
postfix_expression -> primary_expression
primary_expression -> identifier
postfix_expression -> primary_expression
unary_expression -> postfix_expression
cast_expression -> unary_expression
multiplicative_expression -> cast_expression
additive_expression -> multiplicative_expression
shift_expression -> additive_expression
relational_expression -> shift_expression
equality_expression -> relational_expression
AND_expression -> equality_expression
exclusive_OR_expression -> AND_expression
inclusive_OR_expression -> exclusive_OR_expression
logical_AND_expression -> inclusive_OR_expression
logical_OR_expression -> logical_AND_expression
conditional_expression -> logical_OR_expression
assignment_expression -> conditional_expression
argument_expression_list -> assignment_expression
primary_expression -> identifier
postfix_expression -> primary_expression
unary_expression -> postfix_expression
cast_expression -> unary_expression
multiplicative_expression -> cast_expression
constant -> INT_CONST
primary_expression -> constant
postfix_expression -> primary_expression
unary_expression -> postfix_expression
cast_expression -> unary_expression
multiplicative_expression -> multiplicative_expression / cast_expression
additive_expression -> multiplicative_expression
shift_expression -> additive_expression
relational_expression -> shift_expression
equality_expression -> relational_expression
AND_expression -> equality_expression
exclusive_OR_expression -> AND_expression
inclusive_OR_expression -> exclusive_OR_expression
logical_AND_expression -> inclusive_OR_expression
logical_OR_expression -> logical_AND_expression
conditional_expression -> logical_OR_expression
assignment_expression -> conditional_expression
argument_expression_list -> argument_expression_list , assignment_expression
argument_expression_list_opt -> argument_expression_list
postfix_expression -> postfix_expression ( argument_expression_list_opt )
unary_expression -> postfix_expression
cast_expression -> unary_expression
multiplicative_expression -> multiplicative_expression * cast_expression
additive_expression -> multiplicative_expression
shift_expression -> additive_expression
relational_expression -> shift_expression
equality_expression -> relational_expression
AND_expression -> equality_expression
exclusive_OR_expression -> AND_expression
inclusive_OR_expression -> exclusive_OR_expression
logical_AND_expression -> inclusive_OR_expression
logical_OR_expression -> logical_AND_expression
conditional_expression -> logical_OR_expression
assignment_expression -> conditional_expression
expression -> assignment_expression
expression_opt -> expression
jump_statement -> return expression_opt ;
statement -> jump_statement
selection_statement -> if ( expression ) statement else statement
statement -> selection_statement
selection_statement -> if ( expression ) statement else statement
statement -> selection_statement
selection_statement -> if ( expression ) statement else statement
statement -> selection_statement
block_item -> statement
block_item_list -> block_item

PARSING LINE NO. 24 :

block_item_list_opt -> block_item_list
compound_statement -> { block_item_list_opt }
function_definition -> declaration_specifiers declarator declaration_list_opt compound_statement
external_declaration -> function_definition
translation_unit -> external_declaration

PARSING LINE NO. 25 :


PARSING LINE NO. 26 :

enum_specifier -> enum identifier
type_specifier -> enum_specifier
declaration_specifiers_opt -> EPSILON
declaration_specifiers -> type_specifier declaration_specifiers_opt
init_declarator_list_opt -> EPSILON
declaration -> declaration_specifiers init_declarator_list_opt ;
external_declaration -> declaration
translation_unit -> external_declaration

PARSING LINE NO. 27 :

identifier_opt -> IDENTIFIER
enumerator -> enumeration_constant
enumerator_list -> enumerator
enumerator -> enumeration_constant
enumerator_list -> enumerator_list , enumerator
enumerator -> enumeration_constant
enumerator_list -> enumerator_list , enumerator
enumerator -> enumeration_constant
enumerator_list -> enumerator_list , enumerator
enumerator -> enumeration_constant
enumerator_list -> enumerator_list , enumerator
enumerator -> enumeration_constant
enumerator_list -> enumerator_list , enumerator
enumerator -> enumeration_constant
enumerator_list -> enumerator_list , enumerator
enumerator -> enumeration_constant
enumerator_list -> enumerator_list , enumerator
enumerator -> enumeration_constant
enumerator_list -> enumerator_list , enumerator
enumerator -> enumeration_constant
enumerator_list -> enumerator_list , enumerator
enumerator -> enumeration_constant
enumerator_list -> enumerator_list , enumerator
enumerator -> enumeration_constant
enumerator_list -> enumerator_list , enumerator
enum_specifier -> enum identifier_opt { enumerator_list }
type_specifier -> enum_specifier

PARSING LINE NO. 28 :


PARSING LINE NO. 29 :

type_qualifier -> restrict
type_specifier -> int
declaration_specifiers_opt -> EPSILON
declaration_specifiers -> type_specifier declaration_specifiers_opt
declaration_specifiers_opt -> declaration_specifiers
declaration_specifiers -> type_qualifier declaration_specifiers_opt
declaration_specifiers_opt -> declaration_specifiers
declaration_specifiers -> type_specifier declaration_specifiers_opt
pointer_opt -> EPSILON
direct_declarator -> identifier
declarator -> pointer_opt direct_declarator
constant -> INT_CONST
primary_expression -> constant
postfix_expression -> primary_expression
unary_expression -> postfix_expression
cast_expression -> unary_expression
multiplicative_expression -> cast_expression
additive_expression -> multiplicative_expression
shift_expression -> additive_expression
relational_expression -> shift_expression
equality_expression -> relational_expression
AND_expression -> equality_expression
exclusive_OR_expression -> AND_expression
inclusive_OR_expression -> exclusive_OR_expression
logical_AND_expression -> inclusive_OR_expression
logical_OR_expression -> logical_AND_expression
conditional_expression -> logical_OR_expression
assignment_expression -> conditional_expression
initializer -> assignment_expression
init_declarator -> declarator = initializer
init_declarator_list -> init_declarator
init_declarator_list_opt -> init_declarator_list
declaration -> declaration_specifiers init_declarator_list_opt ;
external_declaration -> declaration
translation_unit -> external_declaration

PARSING LINE NO. 30 :

type_qualifier -> volatile
type_specifier -> int
declaration_specifiers_opt -> EPSILON
declaration_specifiers -> type_specifier declaration_specifiers_opt
declaration_specifiers_opt -> declaration_specifiers
declaration_specifiers -> type_qualifier declaration_specifiers_opt
pointer_opt -> EPSILON
direct_declarator -> identifier
declarator -> pointer_opt direct_declarator
constant -> INT_CONST
primary_expression -> constant
postfix_expression -> primary_expression
unary_expression -> postfix_expression
cast_expression -> unary_expression
multiplicative_expression -> cast_expression
additive_expression -> multiplicative_expression
shift_expression -> additive_expression
relational_expression -> shift_expression
equality_expression -> relational_expression
AND_expression -> equality_expression
exclusive_OR_expression -> AND_expression
inclusive_OR_expression -> exclusive_OR_expression
logical_AND_expression -> inclusive_OR_expression
logical_OR_expression -> logical_AND_expression
conditional_expression -> logical_OR_expression
assignment_expression -> conditional_expression
initializer -> assignment_expression
init_declarator -> declarator = initializer
init_declarator_list -> init_declarator
init_declarator_list_opt -> init_declarator_list
declaration -> declaration_specifiers init_declarator_list_opt ;
external_declaration -> declaration
translation_unit -> external_declaration

PARSING LINE NO. 31 :

storage_class_specifier -> static
type_specifier -> int
declaration_specifiers_opt -> EPSILON
declaration_specifiers -> type_specifier declaration_specifiers_opt
declaration_specifiers_opt -> declaration_specifiers
declaration_specifiers -> storage_class_specifier declaration_specifiers_opt
pointer_opt -> EPSILON
direct_declarator -> identifier
declarator -> pointer_opt direct_declarator
constant -> INT_CONST
primary_expression -> constant
postfix_expression -> primary_expression
unary_expression -> postfix_expression
cast_expression -> unary_expression
multiplicative_expression -> cast_expression
additive_expression -> multiplicative_expression
shift_expression -> additive_expression
relational_expression -> shift_expression
equality_expression -> relational_expression
AND_expression -> equality_expression
exclusive_OR_expression -> AND_expression
inclusive_OR_expression -> exclusive_OR_expression
logical_AND_expression -> inclusive_OR_expression
logical_OR_expression -> logical_AND_expression
conditional_expression -> logical_OR_expression
assignment_expression -> conditional_expression
initializer -> assignment_expression
init_declarator -> declarator = initializer
init_declarator_list -> init_declarator
init_declarator_list_opt -> init_declarator_list
declaration -> declaration_specifiers init_declarator_list_opt ;
external_declaration -> declaration
translation_unit -> external_declaration

PARSING LINE NO. 32 :


PARSING LINE NO. 33 :

type_specifier -> signed
declaration_specifiers_opt -> EPSILON
declaration_specifiers -> type_specifier declaration_specifiers_opt
pointer_opt -> EPSILON
direct_declarator -> identifier
identifier_list_opt -> EPSILON
direct_declarator -> direct_declarator ( identifier_list_opt )

PARSING LINE NO. 34 :

declarator -> pointer_opt direct_declarator
declaration_list_opt -> EPSILON

PARSING LINE NO. 35 :

type_specifier -> float
declaration_specifiers_opt -> EPSILON
declaration_specifiers -> type_specifier declaration_specifiers_opt
pointer_opt -> EPSILON
direct_declarator -> identifier
declarator -> pointer_opt direct_declarator
constant -> FLOAT_CONST
primary_expression -> constant
postfix_expression -> primary_expression
unary_expression -> postfix_expression
cast_expression -> unary_expression
multiplicative_expression -> cast_expression
additive_expression -> multiplicative_expression
shift_expression -> additive_expression
relational_expression -> shift_expression
equality_expression -> relational_expression
AND_expression -> equality_expression
exclusive_OR_expression -> AND_expression
inclusive_OR_expression -> exclusive_OR_expression
logical_AND_expression -> inclusive_OR_expression
logical_OR_expression -> logical_AND_expression
conditional_expression -> logical_OR_expression
assignment_expression -> conditional_expression
initializer -> assignment_expression
init_declarator -> declarator = initializer
init_declarator_list -> init_declarator
init_declarator_list_opt -> init_declarator_list
declaration -> declaration_specifiers init_declarator_list_opt ;
block_item -> declaration
block_item_list -> block_item

PARSING LINE NO. 36 :

type_specifier -> double
declaration_specifiers_opt -> EPSILON
declaration_specifiers -> type_specifier declaration_specifiers_opt
pointer_opt -> EPSILON
direct_declarator -> identifier
declarator -> pointer_opt direct_declarator
constant -> FLOAT_CONST
primary_expression -> constant
postfix_expression -> primary_expression
unary_expression -> postfix_expression
cast_expression -> unary_expression
multiplicative_expression -> cast_expression
additive_expression -> multiplicative_expression
shift_expression -> additive_expression
relational_expression -> shift_expression
equality_expression -> relational_expression
AND_expression -> equality_expression
exclusive_OR_expression -> AND_expression
inclusive_OR_expression -> exclusive_OR_expression
logical_AND_expression -> inclusive_OR_expression
logical_OR_expression -> logical_AND_expression
conditional_expression -> logical_OR_expression
assignment_expression -> conditional_expression
initializer -> assignment_expression
init_declarator -> declarator = initializer
init_declarator_list -> init_declarator
init_declarator_list_opt -> init_declarator_list
declaration -> declaration_specifiers init_declarator_list_opt ;
block_item -> declaration
block_item_list -> block_item_list block_item

PARSING LINE NO. 37 :

type_specifier -> int
declaration_specifiers_opt -> EPSILON
declaration_specifiers -> type_specifier declaration_specifiers_opt
pointer_opt -> EPSILON
direct_declarator -> identifier
declarator -> pointer_opt direct_declarator
constant -> INT_CONST
primary_expression -> constant
postfix_expression -> primary_expression
unary_expression -> postfix_expression
cast_expression -> unary_expression
multiplicative_expression -> cast_expression
additive_expression -> multiplicative_expression
shift_expression -> additive_expression
relational_expression -> shift_expression
equality_expression -> relational_expression
AND_expression -> equality_expression
exclusive_OR_expression -> AND_expression
inclusive_OR_expression -> exclusive_OR_expression
logical_AND_expression -> inclusive_OR_expression
logical_OR_expression -> logical_AND_expression
conditional_expression -> logical_OR_expression
assignment_expression -> conditional_expression
initializer -> assignment_expression
init_declarator -> declarator = initializer
init_declarator_list -> init_declarator
init_declarator_list_opt -> init_declarator_list
declaration -> declaration_specifiers init_declarator_list_opt ;
block_item -> declaration
block_item_list -> block_item_list block_item

PARSING LINE NO. 38 :


PARSING LINE NO. 39 :

type_specifier -> int
declaration_specifiers_opt -> EPSILON
declaration_specifiers -> type_specifier declaration_specifiers_opt
pointer_opt -> EPSILON
direct_declarator -> identifier
declarator -> pointer_opt direct_declarator
init_declarator -> declarator
init_declarator_list -> init_declarator
pointer_opt -> EPSILON
direct_declarator -> identifier
declarator -> pointer_opt direct_declarator
init_declarator -> declarator
init_declarator_list -> init_declarator_list , init_declarator
init_declarator_list_opt -> init_declarator_list
declaration -> declaration_specifiers init_declarator_list_opt ;
block_item -> declaration
block_item_list -> block_item_list block_item

PARSING LINE NO. 40 :

primary_expression -> identifier
postfix_expression -> primary_expression
unary_expression -> postfix_expression
assignment_operator -> =
constant -> INT_CONST
primary_expression -> constant
postfix_expression -> primary_expression
unary_expression -> postfix_expression
cast_expression -> unary_expression
multiplicative_expression -> cast_expression
additive_expression -> multiplicative_expression
shift_expression -> additive_expression
relational_expression -> shift_expression
equality_expression -> relational_expression
AND_expression -> equality_expression
exclusive_OR_expression -> AND_expression
inclusive_OR_expression -> exclusive_OR_expression
logical_AND_expression -> inclusive_OR_expression
logical_OR_expression -> logical_AND_expression
conditional_expression -> logical_OR_expression
assignment_expression -> conditional_expression
assignment_expression -> unary_expression assignment_operator assignment_expression
expression -> assignment_expression
expression_opt -> expression
expression_statement-> expression_opt ;
statement -> expression_statement
block_item -> statement
block_item_list -> block_item_list block_item
primary_expression -> identifier
postfix_expression -> primary_expression
unary_expression -> postfix_expression
assignment_operator -> =
constant -> INT_CONST
primary_expression -> constant
postfix_expression -> primary_expression
unary_expression -> postfix_expression
cast_expression -> unary_expression
multiplicative_expression -> cast_expression
additive_expression -> multiplicative_expression
shift_expression -> additive_expression
relational_expression -> shift_expression
equality_expression -> relational_expression
AND_expression -> equality_expression
exclusive_OR_expression -> AND_expression
inclusive_OR_expression -> exclusive_OR_expression
logical_AND_expression -> inclusive_OR_expression
logical_OR_expression -> logical_AND_expression
conditional_expression -> logical_OR_expression
assignment_expression -> conditional_expression
assignment_expression -> unary_expression assignment_operator assignment_expression
expression -> assignment_expression
expression_opt -> expression
expression_statement-> expression_opt ;
statement -> expression_statement
block_item -> statement
block_item_list -> block_item_list block_item

PARSING LINE NO. 41 :


PARSING LINE NO. 42 :

type_specifier -> int
declaration_specifiers_opt -> EPSILON
declaration_specifiers -> type_specifier declaration_specifiers_opt
pointer_opt -> EPSILON
direct_declarator -> identifier
declarator -> pointer_opt direct_declarator
init_declarator -> declarator
init_declarator_list -> init_declarator
init_declarator_list_opt -> init_declarator_list
declaration -> declaration_specifiers init_declarator_list_opt ;
block_item -> declaration
block_item_list -> block_item_list block_item

PARSING LINE NO. 43 :

primary_expression -> identifier
postfix_expression -> primary_expression
unary_expression -> postfix_expression
assignment_operator -> =
primary_expression -> identifier
postfix_expression -> primary_expression
unary_expression -> postfix_expression
cast_expression -> unary_expression
multiplicative_expression -> cast_expression
additive_expression -> multiplicative_expression
shift_expression -> additive_expression
relational_expression -> shift_expression
equality_expression -> relational_expression
AND_expression -> equality_expression
primary_expression -> identifier
postfix_expression -> primary_expression
unary_expression -> postfix_expression
cast_expression -> unary_expression
multiplicative_expression -> cast_expression
additive_expression -> multiplicative_expression
shift_expression -> additive_expression
relational_expression -> shift_expression
equality_expression -> relational_expression
AND_expression -> AND_expression & equality_expression
exclusive_OR_expression -> AND_expression
inclusive_OR_expression -> exclusive_OR_expression
logical_AND_expression -> inclusive_OR_expression
logical_OR_expression -> logical_AND_expression
conditional_expression -> logical_OR_expression
assignment_expression -> conditional_expression
assignment_expression -> unary_expression assignment_operator assignment_expression
expression -> assignment_expression
expression_opt -> expression
expression_statement-> expression_opt ;
statement -> expression_statement
block_item -> statement
block_item_list -> block_item_list block_item

PARSING LINE NO. 44 :

primary_expression -> identifier
postfix_expression -> primary_expression
unary_expression -> postfix_expression
assignment_operator -> =
primary_expression -> identifier
postfix_expression -> primary_expression
unary_expression -> postfix_expression
cast_expression -> unary_expression
multiplicative_expression -> cast_expression
additive_expression -> multiplicative_expression
shift_expression -> additive_expression
relational_expression -> shift_expression
equality_expression -> relational_expression
AND_expression -> equality_expression
exclusive_OR_expression -> AND_expression
inclusive_OR_expression -> exclusive_OR_expression
primary_expression -> identifier
postfix_expression -> primary_expression
unary_expression -> postfix_expression
cast_expression -> unary_expression
multiplicative_expression -> cast_expression
additive_expression -> multiplicative_expression
shift_expression -> additive_expression
relational_expression -> shift_expression
equality_expression -> relational_expression
AND_expression -> equality_expression
exclusive_OR_expression -> AND_expression
inclusive_OR_expression -> inclusive_OR_expression | exclusive_OR_expression
logical_AND_expression -> inclusive_OR_expression
logical_OR_expression -> logical_AND_expression
conditional_expression -> logical_OR_expression
assignment_expression -> conditional_expression
assignment_expression -> unary_expression assignment_operator assignment_expression
expression -> assignment_expression
expression_opt -> expression
expression_statement-> expression_opt ;
statement -> expression_statement
block_item -> statement
block_item_list -> block_item_list block_item

PARSING LINE NO. 45 :

primary_expression -> identifier
postfix_expression -> primary_expression
unary_expression -> postfix_expression
assignment_operator -> =
primary_expression -> identifier
postfix_expression -> primary_expression
unary_expression -> postfix_expression
cast_expression -> unary_expression
multiplicative_expression -> cast_expression
additive_expression -> multiplicative_expression
shift_expression -> additive_expression
relational_expression -> shift_expression
equality_expression -> relational_expression
AND_expression -> equality_expression
exclusive_OR_expression -> AND_expression
primary_expression -> identifier
postfix_expression -> primary_expression
unary_expression -> postfix_expression
cast_expression -> unary_expression
multiplicative_expression -> cast_expression
additive_expression -> multiplicative_expression
shift_expression -> additive_expression
relational_expression -> shift_expression
equality_expression -> relational_expression
AND_expression -> equality_expression
exclusive_OR_expression -> exclusive_OR_expression ˆ AND_expression
inclusive_OR_expression -> exclusive_OR_expression
logical_AND_expression -> inclusive_OR_expression
logical_OR_expression -> logical_AND_expression
conditional_expression -> logical_OR_expression
assignment_expression -> conditional_expression
assignment_expression -> unary_expression assignment_operator assignment_expression
expression -> assignment_expression
expression_opt -> expression
expression_statement-> expression_opt ;
statement -> expression_statement
block_item -> statement
block_item_list -> block_item_list block_item

PARSING LINE NO. 46 :

primary_expression -> identifier
postfix_expression -> primary_expression
unary_expression -> postfix_expression
assignment_operator -> -=
primary_expression -> identifier
postfix_expression -> primary_expression
unary_expression -> postfix_expression
cast_expression -> unary_expression
multiplicative_expression -> cast_expression
primary_expression -> identifier
postfix_expression -> primary_expression
unary_expression -> postfix_expression
cast_expression -> unary_expression
multiplicative_expression -> multiplicative_expression * cast_expression
additive_expression -> multiplicative_expression
primary_expression -> identifier
postfix_expression -> primary_expression
unary_expression -> postfix_expression
cast_expression -> unary_expression
multiplicative_expression -> cast_expression
additive_expression -> additive_expression + multiplicative_expression
shift_expression -> additive_expression
relational_expression -> shift_expression
equality_expression -> relational_expression
AND_expression -> equality_expression
exclusive_OR_expression -> AND_expression
inclusive_OR_expression -> exclusive_OR_expression
logical_AND_expression -> inclusive_OR_expression
logical_OR_expression -> logical_AND_expression
conditional_expression -> logical_OR_expression
assignment_expression -> conditional_expression
assignment_expression -> unary_expression assignment_operator assignment_expression
expression -> assignment_expression
expression_opt -> expression
expression_statement-> expression_opt ;
statement -> expression_statement
block_item -> statement
block_item_list -> block_item_list block_item

PARSING LINE NO. 47 :


PARSING LINE NO. 48 :

primary_expression -> identifier
postfix_expression -> primary_expression
unary_expression -> postfix_expression
assignment_operator -> <<=
primary_expression -> identifier
postfix_expression -> primary_expression
unary_expression -> postfix_expression
cast_expression -> unary_expression
multiplicative_expression -> cast_expression
primary_expression -> identifier
postfix_expression -> primary_expression
unary_expression -> postfix_expression
cast_expression -> unary_expression
multiplicative_expression -> multiplicative_expression / cast_expression
additive_expression -> multiplicative_expression
shift_expression -> additive_expression
relational_expression -> shift_expression
equality_expression -> relational_expression
AND_expression -> equality_expression
exclusive_OR_expression -> AND_expression
inclusive_OR_expression -> exclusive_OR_expression
logical_AND_expression -> inclusive_OR_expression
logical_OR_expression -> logical_AND_expression
conditional_expression -> logical_OR_expression
assignment_expression -> conditional_expression
assignment_expression -> unary_expression assignment_operator assignment_expression
expression -> assignment_expression
expression_opt -> expression
expression_statement-> expression_opt ;
statement -> expression_statement
block_item -> statement
block_item_list -> block_item_list block_item

PARSING LINE NO. 49 :


PARSING LINE NO. 50 :


PARSING LINE NO. 52 :


PARSING LINE NO. 53 :


PARSING LINE NO. 54 :


PARSING LINE NO. 55 :

type_specifier -> int
declaration_specifiers_opt -> EPSILON
declaration_specifiers -> type_specifier declaration_specifiers_opt
pointer_opt -> EPSILON
direct_declarator -> identifier
declarator -> pointer_opt direct_declarator
constant -> INT_CONST
primary_expression -> constant
postfix_expression -> primary_expression
unary_expression -> postfix_expression
cast_expression -> unary_expression
multiplicative_expression -> cast_expression
additive_expression -> multiplicative_expression
shift_expression -> additive_expression
relational_expression -> shift_expression
equality_expression -> relational_expression
AND_expression -> equality_expression
exclusive_OR_expression -> AND_expression
inclusive_OR_expression -> exclusive_OR_expression
logical_AND_expression -> inclusive_OR_expression
logical_OR_expression -> logical_AND_expression
conditional_expression -> logical_OR_expression
assignment_expression -> conditional_expression
initializer -> assignment_expression
init_declarator -> declarator = initializer
init_declarator_list -> init_declarator
init_declarator_list_opt -> init_declarator_list
declaration -> declaration_specifiers init_declarator_list_opt ;
block_item -> declaration
block_item_list -> block_item_list block_item

PARSING LINE NO. 56 :

primary_expression -> identifier
postfix_expression -> primary_expression
postfix_expression -> postfix_expression --
unary_expression -> postfix_expression
cast_expression -> unary_expression
multiplicative_expression -> cast_expression
additive_expression -> multiplicative_expression
shift_expression -> additive_expression
relational_expression -> shift_expression
equality_expression -> relational_expression
AND_expression -> equality_expression
exclusive_OR_expression -> AND_expression
inclusive_OR_expression -> exclusive_OR_expression
logical_AND_expression -> inclusive_OR_expression
logical_OR_expression -> logical_AND_expression
conditional_expression -> logical_OR_expression
assignment_expression -> conditional_expression
expression -> assignment_expression

PARSING LINE NO. 57 :


PARSING LINE NO. 58 :

primary_expression -> identifier
postfix_expression -> primary_expression
unary_expression -> postfix_expression
cast_expression -> unary_expression
multiplicative_expression -> cast_expression
additive_expression -> multiplicative_expression
shift_expression -> additive_expression
relational_expression -> shift_expression
equality_expression -> relational_expression
constant -> INT_CONST
primary_expression -> constant
postfix_expression -> primary_expression
unary_expression -> postfix_expression
cast_expression -> unary_expression
multiplicative_expression -> cast_expression
additive_expression -> multiplicative_expression
shift_expression -> additive_expression
relational_expression -> shift_expression
equality_expression -> equality_expression == relational_expression
AND_expression -> equality_expression
exclusive_OR_expression -> AND_expression
inclusive_OR_expression -> exclusive_OR_expression
logical_AND_expression -> inclusive_OR_expression
logical_OR_expression -> logical_AND_expression
conditional_expression -> logical_OR_expression
assignment_expression -> conditional_expression
expression -> assignment_expression
jump_statement -> break ;
statement -> jump_statement

PARSING LINE NO. 59 :


PARSING LINE NO. 60 :

jump_statement -> continue ;
statement -> jump_statement
selection_statement -> if ( expression ) statement else statement
statement -> selection_statement
block_item -> statement
block_item_list -> block_item

PARSING LINE NO. 61 :

block_item_list_opt -> block_item_list
compound_statement -> { block_item_list_opt }
statement -> compound_statement
iteration_statement -> while ( expression ) statement
statement -> iteration_statement
block_item -> statement
block_item_list -> block_item_list block_item

PARSING LINE NO. 62 :


PARSING LINE NO. 63 :

type_specifier -> float
declaration_specifiers_opt -> EPSILON
declaration_specifiers -> type_specifier declaration_specifiers_opt
pointer_opt -> EPSILON
direct_declarator -> identifier
declarator -> pointer_opt direct_declarator
constant -> FLOAT_CONST
primary_expression -> constant
postfix_expression -> primary_expression
unary_expression -> postfix_expression
cast_expression -> unary_expression
multiplicative_expression -> cast_expression
additive_expression -> multiplicative_expression
shift_expression -> additive_expression
relational_expression -> shift_expression
equality_expression -> relational_expression
AND_expression -> equality_expression
exclusive_OR_expression -> AND_expression
inclusive_OR_expression -> exclusive_OR_expression
logical_AND_expression -> inclusive_OR_expression
logical_OR_expression -> logical_AND_expression
conditional_expression -> logical_OR_expression
assignment_expression -> conditional_expression
initializer -> assignment_expression
init_declarator -> declarator = initializer
init_declarator_list -> init_declarator
init_declarator_list_opt -> init_declarator_list
declaration -> declaration_specifiers init_declarator_list_opt ;
block_item -> declaration
block_item_list -> block_item_list block_item

PARSING LINE NO. 64 :


PARSING LINE NO. 65 :


PARSING LINE NO. 66 :

primary_expression -> identifier
postfix_expression -> primary_expression
postfix_expression -> postfix_expression --
unary_expression -> postfix_expression
cast_expression -> unary_expression
multiplicative_expression -> cast_expression
additive_expression -> multiplicative_expression
shift_expression -> additive_expression
relational_expression -> shift_expression
equality_expression -> relational_expression
AND_expression -> equality_expression
exclusive_OR_expression -> AND_expression
inclusive_OR_expression -> exclusive_OR_expression
logical_AND_expression -> inclusive_OR_expression
logical_OR_expression -> logical_AND_expression
conditional_expression -> logical_OR_expression
assignment_expression -> conditional_expression
expression -> assignment_expression
expression_opt -> expression
expression_statement-> expression_opt ;
statement -> expression_statement
block_item -> statement
block_item_list -> block_item

PARSING LINE NO. 67 :

primary_expression -> identifier
postfix_expression -> primary_expression
postfix_expression -> postfix_expression ++
unary_expression -> postfix_expression
cast_expression -> unary_expression
multiplicative_expression -> cast_expression
additive_expression -> multiplicative_expression
shift_expression -> additive_expression
relational_expression -> shift_expression
equality_expression -> relational_expression
AND_expression -> equality_expression
exclusive_OR_expression -> AND_expression
inclusive_OR_expression -> exclusive_OR_expression
logical_AND_expression -> inclusive_OR_expression
logical_OR_expression -> logical_AND_expression
conditional_expression -> logical_OR_expression
assignment_expression -> conditional_expression
expression -> assignment_expression
expression_opt -> expression
expression_statement-> expression_opt ;
statement -> expression_statement
block_item -> statement
block_item_list -> block_item_list block_item

PARSING LINE NO. 68 :

block_item_list_opt -> block_item_list
compound_statement -> { block_item_list_opt }
statement -> compound_statement
primary_expression -> identifier
postfix_expression -> primary_expression
unary_expression -> postfix_expression
cast_expression -> unary_expression
multiplicative_expression -> cast_expression
additive_expression -> multiplicative_expression
shift_expression -> additive_expression
relational_expression -> shift_expression
constant -> INT_CONST
primary_expression -> constant
postfix_expression -> primary_expression
unary_expression -> postfix_expression
cast_expression -> unary_expression
multiplicative_expression -> cast_expression
additive_expression -> multiplicative_expression
shift_expression -> additive_expression
relational_expression -> relational_expression > shift_expression
equality_expression -> relational_expression
AND_expression -> equality_expression
exclusive_OR_expression -> AND_expression
inclusive_OR_expression -> exclusive_OR_expression
logical_AND_expression -> inclusive_OR_expression
logical_OR_expression -> logical_AND_expression
conditional_expression -> logical_OR_expression
assignment_expression -> conditional_expression
expression -> assignment_expression
iteration_statement -> do statement while ( expression ) ;
statement -> iteration_statement
block_item -> statement
block_item_list -> block_item_list block_item

PARSING LINE NO. 69 :


PARSING LINE NO. 70 :

type_specifier -> int
declaration_specifiers_opt -> EPSILON
declaration_specifiers -> type_specifier declaration_specifiers_opt
pointer_opt -> EPSILON
direct_declarator -> identifier
declarator -> pointer_opt direct_declarator
constant -> INT_CONST
primary_expression -> constant
postfix_expression -> primary_expression
unary_expression -> postfix_expression
cast_expression -> unary_expression
multiplicative_expression -> cast_expression
additive_expression -> multiplicative_expression
shift_expression -> additive_expression
relational_expression -> shift_expression
equality_expression -> relational_expression
AND_expression -> equality_expression
exclusive_OR_expression -> AND_expression
inclusive_OR_expression -> exclusive_OR_expression
logical_AND_expression -> inclusive_OR_expression
logical_OR_expression -> logical_AND_expression
conditional_expression -> logical_OR_expression
assignment_expression -> conditional_expression
initializer -> assignment_expression
init_declarator -> declarator = initializer
init_declarator_list -> init_declarator
init_declarator_list_opt -> init_declarator_list
declaration -> declaration_specifiers init_declarator_list_opt ;
block_item -> declaration
block_item_list -> block_item_list block_item

PARSING LINE NO. 71 :


PARSING LINE NO. 72 :

primary_expression -> identifier
postfix_expression -> primary_expression
unary_expression -> postfix_expression
cast_expression -> unary_expression
multiplicative_expression -> cast_expression
additive_expression -> multiplicative_expression
shift_expression -> additive_expression
relational_expression -> shift_expression
equality_expression -> relational_expression
AND_expression -> equality_expression
exclusive_OR_expression -> AND_expression
inclusive_OR_expression -> exclusive_OR_expression
logical_AND_expression -> inclusive_OR_expression
logical_OR_expression -> logical_AND_expression
conditional_expression -> logical_OR_expression
assignment_expression -> conditional_expression
expression -> assignment_expression

PARSING LINE NO. 73 :


PARSING LINE NO. 74 :

constant -> INT_CONST
primary_expression -> constant
postfix_expression -> primary_expression
unary_expression -> postfix_expression
cast_expression -> unary_expression
multiplicative_expression -> cast_expression
additive_expression -> multiplicative_expression
shift_expression -> additive_expression
relational_expression -> shift_expression
equality_expression -> relational_expression
AND_expression -> equality_expression
exclusive_OR_expression -> AND_expression
inclusive_OR_expression -> exclusive_OR_expression
logical_AND_expression -> inclusive_OR_expression
logical_OR_expression -> logical_AND_expression
conditional_expression -> logical_OR_expression
constant_expression -> conditional_expression
jump_statement -> break ;
statement -> jump_statement
labeled_statement -> case constant_expression : statement
statement -> labeled_statement
block_item -> statement
block_item_list -> block_item

PARSING LINE NO. 75 :

constant -> INT_CONST
primary_expression -> constant
postfix_expression -> primary_expression
unary_expression -> postfix_expression
cast_expression -> unary_expression
multiplicative_expression -> cast_expression
additive_expression -> multiplicative_expression
shift_expression -> additive_expression
relational_expression -> shift_expression
equality_expression -> relational_expression
AND_expression -> equality_expression
exclusive_OR_expression -> AND_expression
inclusive_OR_expression -> exclusive_OR_expression
logical_AND_expression -> inclusive_OR_expression
logical_OR_expression -> logical_AND_expression
conditional_expression -> logical_OR_expression
constant_expression -> conditional_expression
primary_expression -> identifier
postfix_expression -> primary_expression
postfix_expression -> postfix_expression ++
unary_expression -> postfix_expression
cast_expression -> unary_expression
multiplicative_expression -> cast_expression
additive_expression -> multiplicative_expression
shift_expression -> additive_expression
relational_expression -> shift_expression
equality_expression -> relational_expression
AND_expression -> equality_expression
exclusive_OR_expression -> AND_expression
inclusive_OR_expression -> exclusive_OR_expression
logical_AND_expression -> inclusive_OR_expression
logical_OR_expression -> logical_AND_expression
conditional_expression -> logical_OR_expression
assignment_expression -> conditional_expression
expression -> assignment_expression
expression_opt -> expression
expression_statement-> expression_opt ;
statement -> expression_statement
labeled_statement -> case constant_expression : statement
statement -> labeled_statement
block_item -> statement
block_item_list -> block_item_list block_item
jump_statement -> break ;
statement -> jump_statement
block_item -> statement
block_item_list -> block_item_list block_item

PARSING LINE NO. 76 :

jump_statement -> break ;
statement -> jump_statement
labeled_statement -> default : statement
statement -> labeled_statement
block_item -> statement
block_item_list -> block_item_list block_item

PARSING LINE NO. 77 :

block_item_list_opt -> block_item_list
compound_statement -> { block_item_list_opt }
statement -> compound_statement
selection_statement -> switch ( expression ) statement
statement -> selection_statement
block_item -> statement
block_item_list -> block_item_list block_item

PARSING LINE NO. 78 :


PARSING LINE NO. 79 :

constant -> INT_CONST
primary_expression -> constant
postfix_expression -> primary_expression
unary_expression -> postfix_expression
cast_expression -> unary_expression
multiplicative_expression -> cast_expression
additive_expression -> multiplicative_expression
shift_expression -> additive_expression
relational_expression -> shift_expression
equality_expression -> relational_expression
AND_expression -> equality_expression
exclusive_OR_expression -> AND_expression
inclusive_OR_expression -> exclusive_OR_expression
logical_AND_expression -> inclusive_OR_expression
logical_OR_expression -> logical_AND_expression
conditional_expression -> logical_OR_expression
assignment_expression -> conditional_expression
expression -> assignment_expression
expression_opt -> expression
jump_statement -> return expression_opt ;
statement -> jump_statement
block_item -> statement
block_item_list -> block_item_list block_item

PARSING LINE NO. 80 :

block_item_list_opt -> block_item_list
compound_statement -> { block_item_list_opt }
function_definition -> declaration_specifiers declarator declaration_list_opt compound_statement
external_declaration -> function_definition
translation_unit -> external_declaration

############################### PARSING END ###############################